"use strict";
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var lastError;
var lastMessage;
var errorCount;
var silenceOutput;
var getContext = function () { return ({}); };
reset();
function reset() {
    lastError = undefined;
    lastMessage = undefined;
    errorCount = 0;
    silenceOutput = false;
}
exports.reset = reset;
function silent(f) {
    if (f === void 0) { f = true; }
    silenceOutput = f;
}
exports.silent = silent;
function setContext(fn) {
    getContext = fn;
}
exports.setContext = setContext;
function error(s) {
    var err = errorString(s);
    // De-dup identical messages
    if (err === lastMessage) {
        return;
    }
    lastMessage = err;
    lastError = lastMessage;
    if (!silenceOutput) {
        console.error(lastError);
    }
    errorCount += 1;
}
exports.error = error;
function warn(s) {
    var err = errorString(s);
    // De-dup identical messages
    if (err === lastMessage) {
        return;
    }
    lastMessage = err;
    if (!silenceOutput) {
        console.warn(lastMessage);
    }
}
exports.warn = warn;
function getLastMessage() {
    return lastMessage;
}
exports.getLastMessage = getLastMessage;
function errorString(s) {
    var ctx = getContext();
    if (ctx.line !== undefined && ctx.column !== undefined) {
        return 'bolt:' + ctx.line + ':' + ctx.column + ': ' + s;
    }
    else {
        return 'bolt: ' + s;
    }
}
function hasErrors() {
    return errorCount > 0;
}
exports.hasErrors = hasErrors;
function errorSummary() {
    if (errorCount === 1) {
        return lastError;
    }
    if (errorCount !== 0) {
        return "Fatal errors: " + errorCount;
    }
    return "";
}
exports.errorSummary = errorSummary;

//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxNQUFNLENBQUMsRUFBRSxDQUFDO0FBQ1osQ0FBQztBQVRlLG9CQUFZLGVBUzNCLENBQUEiLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5sZXQgbGFzdEVycm9yOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5sZXQgbGFzdE1lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZDtcbmxldCBlcnJvckNvdW50OiBudW1iZXI7XG5sZXQgc2lsZW5jZU91dHB1dDogYm9vbGVhbjtcblxubGV0IGdldENvbnRleHQgPSAoKSA9PiAoPEVycm9yQ29udGV4dD4ge30pO1xuXG5yZXNldCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXQoKSB7XG4gIGxhc3RFcnJvciA9IHVuZGVmaW5lZDtcbiAgbGFzdE1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gIGVycm9yQ291bnQgPSAwO1xuICBzaWxlbmNlT3V0cHV0ID0gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWxlbnQoZiA9IHRydWUpIHtcbiAgc2lsZW5jZU91dHB1dCA9IGY7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JDb250ZXh0IHtcbiAgbGluZT86IG51bWJlcjtcbiAgY29sdW1uPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dChmbjogKCkgPT4gRXJyb3JDb250ZXh0KSB7XG4gIGdldENvbnRleHQgPSBmbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKHM6IHN0cmluZykge1xuICBsZXQgZXJyID0gZXJyb3JTdHJpbmcocyk7XG4gIC8vIERlLWR1cCBpZGVudGljYWwgbWVzc2FnZXNcbiAgaWYgKGVyciAgPT09IGxhc3RNZXNzYWdlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxhc3RNZXNzYWdlID0gZXJyO1xuICBsYXN0RXJyb3IgPSBsYXN0TWVzc2FnZTtcbiAgaWYgKCFzaWxlbmNlT3V0cHV0KSB7XG4gICAgY29uc29sZS5lcnJvcihsYXN0RXJyb3IpO1xuICB9XG4gIGVycm9yQ291bnQgKz0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhcm4oczogc3RyaW5nKSB7XG4gIGxldCBlcnIgPSBlcnJvclN0cmluZyhzKTtcbiAgLy8gRGUtZHVwIGlkZW50aWNhbCBtZXNzYWdlc1xuICBpZiAoZXJyID09PSBsYXN0TWVzc2FnZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsYXN0TWVzc2FnZSA9IGVycjtcbiAgaWYgKCFzaWxlbmNlT3V0cHV0KSB7XG4gICAgY29uc29sZS53YXJuKGxhc3RNZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdE1lc3NhZ2UoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIGxhc3RNZXNzYWdlO1xufVxuXG5mdW5jdGlvbiBlcnJvclN0cmluZyhzOiBzdHJpbmcpIHtcbiAgbGV0IGN0eCA9IGdldENvbnRleHQoKTtcbiAgaWYgKGN0eC5saW5lICE9PSB1bmRlZmluZWQgJiYgY3R4LmNvbHVtbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuICdib2x0OicgKyBjdHgubGluZSArICc6JyArIGN0eC5jb2x1bW4gKyAnOiAnICsgcztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ2JvbHQ6ICcgKyBzO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNFcnJvcnMoKTogYm9vbGVhbiB7XG4gIHJldHVybiBlcnJvckNvdW50ID4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yU3VtbWFyeSgpOiBzdHJpbmcge1xuICBpZiAoZXJyb3JDb3VudCA9PT0gMSkge1xuICAgIHJldHVybiA8c3RyaW5nPiBsYXN0RXJyb3I7XG4gIH1cblxuICBpZiAoZXJyb3JDb3VudCAhPT0gMCkge1xuICAgIHJldHVybiBcIkZhdGFsIGVycm9yczogXCIgKyBlcnJvckNvdW50O1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
